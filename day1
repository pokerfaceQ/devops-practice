一、现状的充分了解 - 了解公司当前的情况与进度
二、流程参考

（一）代码开发阶段/版本控制
1.开发人员在他们的IDEA中使用代码检测插件者运行分析本地代码。
2.开发人员A针对某次修改/功能实现发起代码提交请求。
3.开发人员B评审检查此次代码修改, 检查业务逻辑和代码实现，更早的发现问题。
4.如果B发现代码问题，则通知A修改重新提交，如果没有问题，merge到相应的开发分支。
5.开发B相当于开发A的结对编程伙伴，对此开发修改的模块的业务和代码也能同样熟悉，在开发A请假缺席的情况下可以快速充当backup。
（二）构建
1.点击Jenkins pipeline触发流水线。（也可以通过hook设置每次提交自动触发构建，或者设置自动每天晚上构建。）
2.Jenkins pipeline调用Sonar Scanner对项目代码进行扫描分析，并且将报告持久化并且可以通过UI展示，可以设置一些rules。 （Sonar自集成了数据库做持久化。）
3.Jenkins pipeline调用动态测试，按需要集成Junit，Jacoco进行动态测试。
4.前置的各项检测和测试如果符合要求，Jenkins pipeline开始使用对应的工具构建打包。 （c/c++ -> Cmake，Java -> maven， Node.js -> npm。）
5.将打好的包打上tag标签并推送到包管理工具Nexus。（没有Nexus的话，指定文件路径也可以。）
（三）部署
1.Jenkins pipeline 将包部署到指定测试环境 。（也可以使用Ansible，视情况而定。）
2.Jenkins pipeline调用Selenium进行动态测试并生成测试报告。
3.开发和QA在测试环境验证打好的包，如果需要，进行手动的回归验收测试。
4.Jenkins pipeline从Nexus拉取相应tag的release的包并推送到生产环境完成部署。 （也可以使用Ansible。）
（四）日志和监控
1.使用Zabbix，AppDynamic进行服务器级别和应用级别的监控。
2.所有日志集成到Splunk或者ELK，方便业务追踪，问题定位和质量分析。
（五）注意事项
1.生产环境必须使用测试环境最终验证过的包，即相同tag的包。
2.保证测试环境和生产环境的一致性。（Ansible的任务编排可以配置管理，实现不变的基础设施 Iac，也可以引入Docker容器化实现。）
3.尽量避免开发和减少运维人员连接到测试和生产环境手动执行操作，即使连接，保障账号权限最小化。
4.践行持续，向敏捷靠拢，保证每一次代码提交的质量和小颗粒度的持续集成部署，不要攒一波再进行某一项任务，摆脱瀑布模型的方式。
5.保存每次release的分支，方便问题回溯和回滚。

三、设定目标 - 基于公司现状与其他公司的DevOps实践，设定目标，要实现什么样的DevOps目标 - 目标的明确定义
四、如何实现目标 - 最佳路径/最优方案

Devops实现维度
1.流程改进 - 
2.工具自动化 - 可扩展，减少错误发生
3.平台及环境 - 搭建灵活可扩展，可配置，弹性的平台与环境
4.文化 - 信任，沟通，协作的文化氛围
